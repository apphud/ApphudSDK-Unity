using System;
using System.Collections.Generic;
using UnityEngine;

namespace Apphud.Unity.Common.Utils
{
    internal class UIThreadDispatcher : MonoBehaviour
    {
        private static UIThreadDispatcher _instance;
        private static readonly Queue<Action> _executionQueue = new Queue<Action>();

        internal static void Enqueue(Action action)
        {
            lock (_executionQueue)
            {
                _executionQueue.Enqueue(action);
            }
        }

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        private static void Initialize()
        {
            if (_instance == null)
            {
                _instance = new GameObject("ApphudUIThreadDispatcher(AutoGenerated)").AddComponent<UIThreadDispatcher>();
                DontDestroyOnLoad(_instance.gameObject);
            }
        }

        private void Update()
        {
            lock (_executionQueue)
            {
                while (_executionQueue.Count > 0)
                {
                    _executionQueue.Dequeue().Invoke();
                }
            }
        }
    }
}
